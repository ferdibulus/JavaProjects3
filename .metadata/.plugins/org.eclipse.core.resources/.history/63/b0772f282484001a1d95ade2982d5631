package CallableandFutureInterface;

import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService executer = Executors.newFixedThreadPool(1);
//		executer.submit(new Runnable() {
//			
//			@Override
//			public void run() {
//				// TODO Auto-generated method stub
//				Random random = new Random();
//				System.out.println("Thread calisiyor");
//				int sure = random.nextInt(1000) + 2000;
//				try {
//					Thread.sleep(sure);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				System.out.println("Thread cikiyor");
//			}
//		});
//		
//		executer.shutdown();
		
		Future = executer.submit(new Callable<Integer>() {

			@Override
			public Integer call() throws Exception {
				// TODO Auto-generated method stub
			
				Random random = new Random();
				System.out.println("Thread calisiyor");
				int sure = random.nextInt(1000) + 2000;
				try {
					Thread.sleep(sure);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println("Thread cikiyor");
				return sure;
			}
			
		});
		sys
		executer.shutdown();
	}

}
